
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;       Autor:
                        ; Brown Ramírez, Belinda 
                        ; López, José
                        ; timna.brown@ucr.ac.cr
                        ; jose.lopezpicado@ucr.ac.cr
                        ; Jan, 2021
                        
                        ;##--------------------------------  EXPLANATION ------------------------------------
                        ;This algorithm includes two tables:
                        ;1. DATA -> where data is stored
                        ;2. CUAD -> here we have just values with a int sqrt
                        
                        ;- CANT is a variable that sets the amount of first data to
                        ;find that they have an integer square root (Stored in CUAD)
                        ;The square root is calculated and the values are placed in ENTERO. 
                        
                        ;It has several subroutines:
                        ; LEER_CANT: 
                        ;This subroutine receives the CANT value from the 
                        ;keyboard, using the; GETCHAR subroutine. The subroutine 
                        ;must validate that the entered value is a 
                        ;number between 1 and 99. 
                        ; BUSCAR:
                        ;This subroutine looks for the CANT DATA values that are in CUAD.
                        ;Every time that finds a valid value, the BUSCAR 
                        ;subroutine should call the RAIZ subroutine. In addition, 
                        ;the subroutine will carry a counter of the values
                        ;found in the variable CONT. The BUSCAR subroutine 
                        ;passes the value to RAIZ by means of the stack and by 
                        ;this same means RAIZ returns the result. On the other hand 
                        ;the subroutine must put the result in the ENTERO array. 
                        ; RAIZ:
                        ;This subroutine calculates the square root. 
                        ;The value to which it must be obtained the square root must 
                        ;be passed to the subroutine by the stack and the subroutine
                        ;will return the value calculated by the stack. 
                        ; Print_RESULT:
                        ;This subroutine prints the number 
                        ;of rooted numbers and the
                        ;array integers 
                        
                        ;##--------------------------------  DEFINITIONS ------------------------------------
                        
                        ;##------------  STORE DATA ---------------------------------------------------------
000d                    carrage_rturn:  EQU  $0D   
000a                    line_feed:      EQU  $0A 
0000                    endMessag:      EQU  $0 ; ---->  NULL
3dff                    stackPointer:   EQU  $3DFF  
                        
                        ;##------------  DEBUGER SUBROUTINES ---------------------------------------------------------
ee88                    PRINTF:         EQU  $EE88            
ee84                    GETCHAR:        EQU  $EE84             
ee86                    PUTCHAR:        EQU  $EE86           
                        
                        ;##------------ VARIABLES GLOBAL ---------------------------------------------------------
1000                            ORG  $1000
1000 0a                 LONG:         DB   10
1001                    CANT:         DS   1
1002                    CONT:         DS   1
1003 0a                 LONG_CUAD:    DB   10
                        
1010                            ORG  $1010
1010                    ENTERO:       DS   10
                        
1020                            ORG  $1020
1020 01 04 09 09 10 19  DATOS:        DB   1,4,9,9,16,25,8,49,5,64,100
     08 31 05 40 64
                        
1030                            ORG  $1030
1030 04 09 10 19 24 31  CUAD:         DB   4,9,16,25,36,49,64,81,100
     40 51 64
                        
                        ;##------------ VARIABLES LOCAL ---------------------------------------------------------
1040                            ORG  $1040
1040                    COUNTER_B0:     DS   1
1041                    COUNTER_B1:     DS   1
1042                    ITER_LOOP:      DS   2
1044                    WTEMP_1:        DS   2
1046                    ROOT_X:         DS   2      ; X
1048                    ROOT_F:         DS   2      ; F
104a                    ROOT_FA:        DS   2      ; Fn-1
                        
                        ;##------------ TERMINAL MESSAGES ---------------------------------------------------------
104c 0d 0a 0d 0a        PRINT00:        DB carrage_rturn, line_feed, carrage_rturn, line_feed
1050 49 4e 47 52 45 53                  FCC "INGRESE EL VALOR DE CANT (ENTRE 1 Y 99): "
     45 20 45 4c 20 56
     41 4c 4f 52 20 44
     45 20 43 41 4e 54
     20 28 45 4e 54 52
     45 20 31 20 59 20
     39 39 29 3a 20
1079 00                                 DB endMessag
                        
107a                    PRINT01:        FCC ""
107a 0d 0a 0d 0a                        DB carrage_rturn, line_feed, carrage_rturn, line_feed
107e 00                                 DB endMessag
                        
107f 0d 0a 0d 0a        PRINT02:        DB carrage_rturn, line_feed, carrage_rturn, line_feed
1083 43 41 4e 54 49 44                  FCC "CANTIDAD DE NUMEROS ENCONTRADOS : %i "
     41 44 20 44 45 20
     4e 55 4d 45 52 4f
     53 20 45 4e 43 4f
     4e 54 52 41 44 4f
     53 20 3a 20 25 69
     20
10a8 00                                 DB endMessag
                                
10a9 0d 0a 0d 0a        PRINT03:        DB carrage_rturn, line_feed, carrage_rturn, line_feed
10ad 45 4e 54 45 52 4f                  FCC "ENTEROS : "
     53 20 3a 20
10b7 00                                 DB endMessag
                                
10b8 25 75 2c 20        PRINT04:        FCC "%u, "
10bc 00                                 DB endMessag
                                
10bd 25 75              PRINT05:        FCC "%u"
10bf 0d 0a 0d 0a                        DB carrage_rturn, line_feed, carrage_rturn, line_feed
10c3 00                                 DB endMessag
                        
                        ;##-------------------------------- MAIN ------------------------------------
2000                            ORG   $2000
2000                    _init:
2000 cf 3d ff                   LDS   #stackPointer       ; init stack pointer
2003 16 20 0f                   JSR   LEER_CANT          
2006 16 20 59                   JSR   BUSCAR             
2009 16 20 d4                   JSR   PRINT_RESULT        
200c                    end:            
200c 06 20 0c                   JMP   end
                        
                        
                        ;##------------- READ VALUES -------------------------------------------------------
200f                    LEER_CANT:
200f cc 10 4c                   LDD   #PRINT00
2012 ce 00 00                   LDX   #$0000
2015 15 e3 ee 88                JSR   [PRINTF,X]             ; print -> INGRESE EL VALOR DE CANT (ENTRE 1 Y 99): 
2019 18 0b 00 10 01             MOVB  #0, CANT
201e 18 0b 02 10 40             MOVB  #2, COUNTER_B0         
                        
2023                    GET_CHAR:        
2023 ce 00 00                   LDX   #$0000                 ; get number 
2026 15 e3 ee 84                JSR   [GETCHAR,X]            ; $30  < char <  $39
202a c1 30                      CMPB  #$30
202c 25 f5                      BCS   GET_CHAR
202e c1 39                      CMPB  #$39
2030 22 f1                      BHI   GET_CHAR
                        
2032                    PRINT_CHAR:
2032 ce 00 00                   LDX   #$0000
2035 15 e3 ee 86                JSR   [PUTCHAR,X]            ; print valid char
                        
2039                    CALC_CANT:
2039 83 00 30                   SUBD  #$30                  ; from chart to int 
203c 86 02                      LDAA  #2
203e b1 10 40                   CMPA  COUNTER_B0
2041 26 05                      BNE   UNITS
                        
2043                    TENTS:
2043 87                         CLRA                         
2044 cd 00 0a                   LDY   #10                    ; int* 10
2047 13                         EMUL
                        
2048                    UNITS:
2048 fb 10 01                   ADDB  CANT                   ; unit do not multiply
204b 7b 10 01                   STAB  CANT
204e 73 10 40                   DEC   COUNTER_B0
                        
2051                    IF_LOOP:
2051 26 d0                      BNE   GET_CHAR
2053 f7 10 01                   TST   CANT
2056 27 b7                      BEQ   LEER_CANT              ; if CANT == 0 
2058 3d                         RTS
                                        
                        ;##------------- SEARCH -------------------------------------------------------
2059                    BUSCAR:
2059 18 0b 00 10 02             MOVB  #0, CONT
205e 18 0c 10 00 10 40          MOVB  LONG, COUNTER_B0
2064 18 03 10 10 10 42          MOVW  #ENTERO, ITER_LOOP
206a ce 10 20                   LDX   #DATOS                ; load data
                        
206d                    DATOS_LOOP: 
206d e6 30                      LDAB  1,X+                  ; value per value 
206f cd 10 30                   LDY   #CUAD
2072 18 0c 10 03 10 41          MOVB  LONG_CUAD, COUNTER_B1
                        
2078                    CUAD_LOOP:      
2078 a6 40                      LDAA  $0,Y                   ; get data
207a e1 70                      CMPB  1,Y+                   ; compare with CUAD
207c 26 1a                      BNE   DEC_CUAD_COUNT         ; if match -> sqrt?
207e 72 10 02                   INC   CONT
                        
2081                    CALC_ROOT:       
2081 34                         PSHX
2082 37                         PSHB
2083 16 20 a3                   JSR   RAIZ                  
2086 33                         PULB
2087 30                         pulx
                        
2088                    SAVE_ROOT:      ; store sqrt in ENTERO
2088 fd 10 42                   LDY   ITER_LOOP                 
208b 6b 70                      STAB  1,y+
208d 7d 10 42                   STY   ITER_LOOP 
                        
2090                    DEC_CANT:        
2090 73 10 01                   DEC   CANT
2093 27 0d                      BEQ   END_BUSCAR             ; if CANT = 0
2095 06 20 9d                   JMP   DEC_DATOS_COUNT
                        
2098                    DEC_CUAD_COUNT: 
2098 73 10 41                   DEC   COUNTER_B1
209b 26 db                      BNE   CUAD_LOOP
                        
209d                    DEC_DATOS_COUNT: 
209d 73 10 40                   DEC   COUNTER_B0
20a0 26 cb                      BNE   DATOS_LOOP
                        
20a2                    END_BUSCAR:      
20a2 3d                         RTS
                        
                        ;##------------- SQRT -------------------------------------------------------
20a3                    RAIZ:      
20a3 31                         PULY
20a4 87                         CLRA
20a5 33                         PULB
20a6 7c 10 46                   STD    ROOT_X             ; X
20a9 7c 10 4a                   STD    ROOT_FA
20ac 18 03 00 00 10 48          MOVW   #0, ROOT_F         ; F0 = 0
                        
20b2                    LOOP_RAIZ:      
20b2 bc 10 48                   CPD    ROOT_F             ; F  = FA
20b5 27 1a                      BEQ    READY
20b7 18 04 10 4a 10 48          MOVW   ROOT_FA,ROOT_F
20bd fc 10 46                   LDD    ROOT_X
20c0 fe 10 4a                   LDX    ROOT_FA
20c3 18 10                      IDIV
20c5 b7 c5                      XGDX
20c7 f3 10 4a                   ADDD   ROOT_FA
20ca 49                         LSRD
20cb 7c 10 4a                   STD    ROOT_FA           ; F = 1/2( X/FA + FA)
20ce 06 20 b2                   JMP    LOOP_RAIZ
                        
20d1                    READY:          
20d1 37                         PSHB
20d2 35                         PSHY
20d3 3d                         RTS
                        
                        ;##------------- PRINT_RESULT -------------------------------------------------------
                        
20d4                    PRINT_RESULT:   
20d4 31                         PULY                       ;  save returning address 
20d5 7d 10 44                   STY    WTEMP_1            
20d8 87                         CLRA
20d9 f6 10 02                   LDAB   CONT
20dc 3b                         PSHD
20dd cc 10 7f                   LDD    #PRINT02
20e0 ce 00 00                   LDX    #$0000
20e3 15 e3 ee 88                JSR    [PRINTF,X]          ; print CONT
20e7 cc 10 a9                   LDD    #PRINT03
20ea ce 00 00                   LDX    #$0000
20ed 15 e3 ee 88                JSR    [PRINTF,X]
20f1 18 0c 10 02 10 40          MOVB   CONT, COUNTER_B0
20f7 18 03 10 10 10 42          MOVW   #ENTERO, ITER_LOOP
                        
20fd                    PRINT_LOOP:     
20fd fd 10 42                   LDY    ITER_LOOP              ; print ENTERO array
2100 87                         CLRA
2101 e6 70                      LDAB   1,Y+
2103 3b                         PSHD
2104 7d 10 42                   STY    ITER_LOOP
2107 c6 01                      LDAB   #1
2109 f1 10 40                   CMPB   COUNTER_B0
210c 27 0d                      BEQ    LAST_PRINT          ; if COUNTER_B0 = 1 
210e cc 10 b8                   LDD    #PRINT04
2111 ce 00 00                   LDX    #$0000
2114 15 e3 ee 88                JSR    [PRINTF,X]
2118 06 21 25                   JMP    DEC_COUNTER
                        
211b                    LAST_PRINT:     ; no print "," for last
211b cc 10 bd                   LDD    #PRINT05              
211e ce 00 00                   LDX    #$0000              
2121 15 e3 ee 88                JSR    [PRINTF,X]
                        
2125                    DEC_COUNTER:    
2125 73 10 40                   DEC    COUNTER_B0
2128 26 d3                      BNE    PRINT_LOOP
212a fd 10 44                   LDY    WTEMP_1             ; get stack pointer 
212d 35                         PSHY
212e 3d                         RTS
                                        

Executed: Tue Feb 09 09:08:28 2021
Total cycles: 352, Total bytes: 445
Total errors: 0, Total warnings: 0
